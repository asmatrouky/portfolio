---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import ContactCTA from '../components/ContactCTA.astro';
import PortfolioPreview from '../components/PortfolioPreview.astro';
import Hero from '../components/Hero.astro';
import Grid from '../components/Grid.astro';

// Charger les projets
const projects: CollectionEntry<'work'>[] = await getCollection('work');

// Les catégories disponibles pour filtrer
const categories: string[] = ['Compétences Développer', 'Compétences Entreprendre', 'Compétences Métiers'];
---

<BaseLayout
  title="Portefeuille de compétences"
  description=""
>
  <div class="stack gap-20">
    <main class="wrapper stack gap-8">
      <Hero
        title="Portefeuille de compétences"
        tagline="Dans le cadre de ma scolarité, j'ai créé ce portefeuille pour démontrer les compétences acquises durant mes études. Il met en lumière mes capacités et réalisations, notamment à travers le projet de réalité augmentée développé cette année. Ce document fournit une preuve concrète de mes compétences techniques et professionnelles, permettant d'évaluer ma progression et de montrer aux employeurs, collègues ou évaluateurs académiques ce dont je suis capable."
        align="start"
      />

      <!-- Boutons pour sélectionner une compétence -->
      <div class="categories-buttons">
        <button class="filter-button" data-category="all">Tous</button>
        {categories.map((category) => (
          <button class="filter-button" data-category={category.replace(/\s+/g, '-').toLowerCase()}>
            {category}
          </button>
        ))}
      </div>

      <!-- Section pour les projets -->
      <section id="projects-section" class="projects-section">
        <Grid variant="offset">
          {projects.map((project) => (
            <div
              class={`project-item ${project.data.category.replace(/\s+/g, '-').toLowerCase()}`}
            >
              <PortfolioPreview project={project} />
            </div>
          ))}
        </Grid>
      </section>
    </main>
    <ContactCTA />
  </div>

  <style>
    .categories-buttons {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    button {
      padding: 10px 20px;
      border: none;
      cursor: pointer;
    }
    button.active {
      color: white;
    }
    button:hover {
      color: white;
    }
    .project-item {
      display: block;
    }
    .hidden {
      display: none;
    }
    .categories-buttons {
      display: flex;
      gap: 20px;
      margin-bottom: 40px;
      justify-content: center;
    }

    /* Boutons catégorie plus imposants et modernes, sans bordure */
    .filter-button {
      padding: 15px 30px; /* Taille plus grande */
      border: none; /* Pas de contour */
      border-radius: 12px; /* Bords arrondis plus prononcés */
      background-color: var(--accent-light);
      color:#ffffff; /* Toujours blanc pour le texte */
      font-size: var(--text-lg); /* Plus grande taille de police */
      font-family: var(--font-brand); /* Police de la marque */
      font-weight: 600; /* Rendre le texte plus imposant */
      cursor: pointer;
      transition: background-color var(--theme-transition), transform var(--theme-transition); /* Transition plus douce */
      box-shadow: var(--shadow-md); /* Ajout d'une ombre pour un effet de relief */
    }

    .filter-button.active {
      background-color: var(--accent-regular); /* Couleur active */
      color: #ffffff; /* Toujours blanc quand actif */
      transform: scale(1.05); /* Légère mise en avant lorsqu'il est actif */
    }

    .filter-button:hover {
      background-color: var(--accent-dark); /* Couleur au survol */
      color: #ffffff; /* Texte toujours blanc au survol */
      transform: scale(1.05); /* Légère mise en avant au survol */
      box-shadow: var(--shadow-lg); /* Ombre plus forte au survol */
    }
  </style>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      const buttons = document.querySelectorAll('.filter-button');
      const projects = document.querySelectorAll('.project-item');

      // Fonction de filtrage simple
      function filterProjects(category) {
        projects.forEach((project) => {
          if (category === 'all') {
            project.classList.remove('hidden');
          } else if (project.classList.contains(category)) {
            project.classList.remove('hidden');
          } else {
            project.classList.add('hidden');
          }
        });
      }

      // Gérer les clics sur les boutons
      buttons.forEach((button) => {
        button.addEventListener('click', () => {
          // Réinitialiser les boutons actifs
          buttons.forEach((btn) => btn.classList.remove('active'));
          button.classList.add('active');
          // Filtrer les projets
          const category = button.getAttribute('data-category');
          filterProjects(category);
        });
      });

      // Afficher tous les projets par défaut
      filterProjects('all');
    });
  </script>
</BaseLayout>
